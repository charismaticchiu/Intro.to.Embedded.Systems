                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0/*rc1*/ #8960 (Mar 15 2014) (MINGW32)
                                      4 ; This file was generated Mon Mar 31 19:15:31 2014
                                      5 ;--------------------------------------------------------
                                      6 	.module hw4
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _Main
                                     13 	.globl _CY
                                     14 	.globl _AC
                                     15 	.globl _F0
                                     16 	.globl _RS1
                                     17 	.globl _RS0
                                     18 	.globl _OV
                                     19 	.globl _F1
                                     20 	.globl _P
                                     21 	.globl _PS
                                     22 	.globl _PT1
                                     23 	.globl _PX1
                                     24 	.globl _PT0
                                     25 	.globl _PX0
                                     26 	.globl _RD
                                     27 	.globl _WR
                                     28 	.globl _T1
                                     29 	.globl _T0
                                     30 	.globl _INT1
                                     31 	.globl _INT0
                                     32 	.globl _TXD
                                     33 	.globl _RXD
                                     34 	.globl _P3_7
                                     35 	.globl _P3_6
                                     36 	.globl _P3_5
                                     37 	.globl _P3_4
                                     38 	.globl _P3_3
                                     39 	.globl _P3_2
                                     40 	.globl _P3_1
                                     41 	.globl _P3_0
                                     42 	.globl _EA
                                     43 	.globl _ES
                                     44 	.globl _ET1
                                     45 	.globl _EX1
                                     46 	.globl _ET0
                                     47 	.globl _EX0
                                     48 	.globl _P2_7
                                     49 	.globl _P2_6
                                     50 	.globl _P2_5
                                     51 	.globl _P2_4
                                     52 	.globl _P2_3
                                     53 	.globl _P2_2
                                     54 	.globl _P2_1
                                     55 	.globl _P2_0
                                     56 	.globl _SM0
                                     57 	.globl _SM1
                                     58 	.globl _SM2
                                     59 	.globl _REN
                                     60 	.globl _TB8
                                     61 	.globl _RB8
                                     62 	.globl _TI
                                     63 	.globl _RI
                                     64 	.globl _P1_7
                                     65 	.globl _P1_6
                                     66 	.globl _P1_5
                                     67 	.globl _P1_4
                                     68 	.globl _P1_3
                                     69 	.globl _P1_2
                                     70 	.globl _P1_1
                                     71 	.globl _P1_0
                                     72 	.globl _TF1
                                     73 	.globl _TR1
                                     74 	.globl _TF0
                                     75 	.globl _TR0
                                     76 	.globl _IE1
                                     77 	.globl _IT1
                                     78 	.globl _IE0
                                     79 	.globl _IT0
                                     80 	.globl _P0_7
                                     81 	.globl _P0_6
                                     82 	.globl _P0_5
                                     83 	.globl _P0_4
                                     84 	.globl _P0_3
                                     85 	.globl _P0_2
                                     86 	.globl _P0_1
                                     87 	.globl _P0_0
                                     88 	.globl _B
                                     89 	.globl _ACC
                                     90 	.globl _PSW
                                     91 	.globl _IP
                                     92 	.globl _P3
                                     93 	.globl _IE
                                     94 	.globl _P2
                                     95 	.globl _SBUF
                                     96 	.globl _SCON
                                     97 	.globl _P1
                                     98 	.globl _TH1
                                     99 	.globl _TH0
                                    100 	.globl _TL1
                                    101 	.globl _TL0
                                    102 	.globl _TMOD
                                    103 	.globl _TCON
                                    104 	.globl _PCON
                                    105 	.globl _DPH
                                    106 	.globl _DPL
                                    107 	.globl _SP
                                    108 	.globl _P0
                                    109 	.globl _IRWRITE
                                    110 	.globl _functionSet
                                    111 	.globl _setDdRamAddress
                                    112 	.globl _sendChar
                                    113 	.globl _sendString
                                    114 	.globl _delay
                                    115 ;--------------------------------------------------------
                                    116 ; special function registers
                                    117 ;--------------------------------------------------------
                                    118 	.area RSEG    (ABS,DATA)
      000000                        119 	.org 0x0000
                           000080   120 _P0	=	0x0080
                           000081   121 _SP	=	0x0081
                           000082   122 _DPL	=	0x0082
                           000083   123 _DPH	=	0x0083
                           000087   124 _PCON	=	0x0087
                           000088   125 _TCON	=	0x0088
                           000089   126 _TMOD	=	0x0089
                           00008A   127 _TL0	=	0x008a
                           00008B   128 _TL1	=	0x008b
                           00008C   129 _TH0	=	0x008c
                           00008D   130 _TH1	=	0x008d
                           000090   131 _P1	=	0x0090
                           000098   132 _SCON	=	0x0098
                           000099   133 _SBUF	=	0x0099
                           0000A0   134 _P2	=	0x00a0
                           0000A8   135 _IE	=	0x00a8
                           0000B0   136 _P3	=	0x00b0
                           0000B8   137 _IP	=	0x00b8
                           0000D0   138 _PSW	=	0x00d0
                           0000E0   139 _ACC	=	0x00e0
                           0000F0   140 _B	=	0x00f0
                                    141 ;--------------------------------------------------------
                                    142 ; special function bits
                                    143 ;--------------------------------------------------------
                                    144 	.area RSEG    (ABS,DATA)
      000000                        145 	.org 0x0000
                           000080   146 _P0_0	=	0x0080
                           000081   147 _P0_1	=	0x0081
                           000082   148 _P0_2	=	0x0082
                           000083   149 _P0_3	=	0x0083
                           000084   150 _P0_4	=	0x0084
                           000085   151 _P0_5	=	0x0085
                           000086   152 _P0_6	=	0x0086
                           000087   153 _P0_7	=	0x0087
                           000088   154 _IT0	=	0x0088
                           000089   155 _IE0	=	0x0089
                           00008A   156 _IT1	=	0x008a
                           00008B   157 _IE1	=	0x008b
                           00008C   158 _TR0	=	0x008c
                           00008D   159 _TF0	=	0x008d
                           00008E   160 _TR1	=	0x008e
                           00008F   161 _TF1	=	0x008f
                           000090   162 _P1_0	=	0x0090
                           000091   163 _P1_1	=	0x0091
                           000092   164 _P1_2	=	0x0092
                           000093   165 _P1_3	=	0x0093
                           000094   166 _P1_4	=	0x0094
                           000095   167 _P1_5	=	0x0095
                           000096   168 _P1_6	=	0x0096
                           000097   169 _P1_7	=	0x0097
                           000098   170 _RI	=	0x0098
                           000099   171 _TI	=	0x0099
                           00009A   172 _RB8	=	0x009a
                           00009B   173 _TB8	=	0x009b
                           00009C   174 _REN	=	0x009c
                           00009D   175 _SM2	=	0x009d
                           00009E   176 _SM1	=	0x009e
                           00009F   177 _SM0	=	0x009f
                           0000A0   178 _P2_0	=	0x00a0
                           0000A1   179 _P2_1	=	0x00a1
                           0000A2   180 _P2_2	=	0x00a2
                           0000A3   181 _P2_3	=	0x00a3
                           0000A4   182 _P2_4	=	0x00a4
                           0000A5   183 _P2_5	=	0x00a5
                           0000A6   184 _P2_6	=	0x00a6
                           0000A7   185 _P2_7	=	0x00a7
                           0000A8   186 _EX0	=	0x00a8
                           0000A9   187 _ET0	=	0x00a9
                           0000AA   188 _EX1	=	0x00aa
                           0000AB   189 _ET1	=	0x00ab
                           0000AC   190 _ES	=	0x00ac
                           0000AF   191 _EA	=	0x00af
                           0000B0   192 _P3_0	=	0x00b0
                           0000B1   193 _P3_1	=	0x00b1
                           0000B2   194 _P3_2	=	0x00b2
                           0000B3   195 _P3_3	=	0x00b3
                           0000B4   196 _P3_4	=	0x00b4
                           0000B5   197 _P3_5	=	0x00b5
                           0000B6   198 _P3_6	=	0x00b6
                           0000B7   199 _P3_7	=	0x00b7
                           0000B0   200 _RXD	=	0x00b0
                           0000B1   201 _TXD	=	0x00b1
                           0000B2   202 _INT0	=	0x00b2
                           0000B3   203 _INT1	=	0x00b3
                           0000B4   204 _T0	=	0x00b4
                           0000B5   205 _T1	=	0x00b5
                           0000B6   206 _WR	=	0x00b6
                           0000B7   207 _RD	=	0x00b7
                           0000B8   208 _PX0	=	0x00b8
                           0000B9   209 _PT0	=	0x00b9
                           0000BA   210 _PX1	=	0x00ba
                           0000BB   211 _PT1	=	0x00bb
                           0000BC   212 _PS	=	0x00bc
                           0000D0   213 _P	=	0x00d0
                           0000D1   214 _F1	=	0x00d1
                           0000D2   215 _OV	=	0x00d2
                           0000D3   216 _RS0	=	0x00d3
                           0000D4   217 _RS1	=	0x00d4
                           0000D5   218 _F0	=	0x00d5
                           0000D6   219 _AC	=	0x00d6
                           0000D7   220 _CY	=	0x00d7
                                    221 ;--------------------------------------------------------
                                    222 ; overlayable register banks
                                    223 ;--------------------------------------------------------
                                    224 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        225 	.ds 8
                                    226 ;--------------------------------------------------------
                                    227 ; internal ram data
                                    228 ;--------------------------------------------------------
                                    229 	.area DSEG    (DATA)
                                    230 ;--------------------------------------------------------
                                    231 ; overlayable items in internal ram 
                                    232 ;--------------------------------------------------------
                                    233 	.area	OSEG    (OVR,DATA)
                                    234 ;--------------------------------------------------------
                                    235 ; indirectly addressable internal ram data
                                    236 ;--------------------------------------------------------
                                    237 	.area ISEG    (DATA)
                                    238 ;--------------------------------------------------------
                                    239 ; absolute internal ram data
                                    240 ;--------------------------------------------------------
                                    241 	.area IABS    (ABS,DATA)
                                    242 	.area IABS    (ABS,DATA)
                                    243 ;--------------------------------------------------------
                                    244 ; bit data
                                    245 ;--------------------------------------------------------
                                    246 	.area BSEG    (BIT)
                                    247 ;--------------------------------------------------------
                                    248 ; paged external ram data
                                    249 ;--------------------------------------------------------
                                    250 	.area PSEG    (PAG,XDATA)
                                    251 ;--------------------------------------------------------
                                    252 ; external ram data
                                    253 ;--------------------------------------------------------
                                    254 	.area XSEG    (XDATA)
                                    255 ;--------------------------------------------------------
                                    256 ; absolute external ram data
                                    257 ;--------------------------------------------------------
                                    258 	.area XABS    (ABS,XDATA)
                                    259 ;--------------------------------------------------------
                                    260 ; external initialized ram data
                                    261 ;--------------------------------------------------------
                                    262 	.area XISEG   (XDATA)
                                    263 	.area HOME    (CODE)
                                    264 	.area GSINIT0 (CODE)
                                    265 	.area GSINIT1 (CODE)
                                    266 	.area GSINIT2 (CODE)
                                    267 	.area GSINIT3 (CODE)
                                    268 	.area GSINIT4 (CODE)
                                    269 	.area GSINIT5 (CODE)
                                    270 	.area GSINIT  (CODE)
                                    271 	.area GSFINAL (CODE)
                                    272 	.area CSEG    (CODE)
                                    273 ;--------------------------------------------------------
                                    274 ; global & static initialisations
                                    275 ;--------------------------------------------------------
                                    276 	.area HOME    (CODE)
                                    277 	.area GSINIT  (CODE)
                                    278 	.area GSFINAL (CODE)
                                    279 	.area GSINIT  (CODE)
                                    280 ;--------------------------------------------------------
                                    281 ; Home
                                    282 ;--------------------------------------------------------
                                    283 	.area HOME    (CODE)
                                    284 	.area HOME    (CODE)
                                    285 ;--------------------------------------------------------
                                    286 ; code
                                    287 ;--------------------------------------------------------
                                    288 	.area CSEG    (CODE)
                                    289 ;------------------------------------------------------------
                                    290 ;Allocation info for local variables in function 'Main'
                                    291 ;------------------------------------------------------------
                                    292 ;	hw4.c:33: void Main(void) {
                                    293 ;	-----------------------------------------
                                    294 ;	 function Main
                                    295 ;	-----------------------------------------
      000000                        296 _Main:
                           000007   297 	ar7 = 0x07
                           000006   298 	ar6 = 0x06
                           000005   299 	ar5 = 0x05
                           000004   300 	ar4 = 0x04
                           000003   301 	ar3 = 0x03
                           000002   302 	ar2 = 0x02
                           000001   303 	ar1 = 0x01
                           000000   304 	ar0 = 0x00
                                    305 ;	hw4.c:35: functionSet();
      000000 12r00r69         [24]  306 	lcall	_functionSet
                                    307 ;	hw4.c:37: IRWRITE(0x06);
      000003 75 82 06         [24]  308 	mov	dpl,#0x06
      000006 12r00r4E         [24]  309 	lcall	_IRWRITE
                                    310 ;	hw4.c:39: IRWRITE(0x0F);
      000009 75 82 0F         [24]  311 	mov	dpl,#0x0F
      00000C 12r00r4E         [24]  312 	lcall	_IRWRITE
                                    313 ;	hw4.c:40: sendString("EdSim51 LCD Module Simulation");
      00000F 90r00r00         [24]  314 	mov	dptr,#___str_0
      000012 75 F0 80         [24]  315 	mov	b,#0x80
      000015 12r00rC4         [24]  316 	lcall	_sendString
                                    317 ;	hw4.c:41: setDdRamAddress(0x40); // set address to start of second line
      000018 75 82 40         [24]  318 	mov	dpl,#0x40
      00001B 12r00r86         [24]  319 	lcall	_setDdRamAddress
                                    320 ;	hw4.c:42: sendString("Based on Hitachi HD44780");
      00001E 90r00r1E         [24]  321 	mov	dptr,#___str_1
      000021 75 F0 80         [24]  322 	mov	b,#0x80
      000024 12r00rC4         [24]  323 	lcall	_sendString
                                    324 ;	hw4.c:50: while (1) {
      000027                        325 00112$:
                                    326 ;	hw4.c:51: if (ret == 0) {
      000027 20 A5 08         [24]  327 	jb	_P2_5,00109$
                                    328 ;	hw4.c:53: IRWRITE(0x02);
      00002A 75 82 02         [24]  329 	mov	dpl,#0x02
      00002D 12r00r4E         [24]  330 	lcall	_IRWRITE
      000030 80 F5            [24]  331 	sjmp	00112$
      000032                        332 00109$:
                                    333 ;	hw4.c:56: if (left == 0 && right == 1) {
      000032 20 A6 0B         [24]  334 	jb	_P2_6,00105$
      000035 30 A7 08         [24]  335 	jnb	_P2_7,00105$
                                    336 ;	hw4.c:58: IRWRITE(0x18);
      000038 75 82 18         [24]  337 	mov	dpl,#0x18
      00003B 12r00r4E         [24]  338 	lcall	_IRWRITE
      00003E 80 E7            [24]  339 	sjmp	00112$
      000040                        340 00105$:
                                    341 ;	hw4.c:60: else if (left == 1 && right == 0) {
      000040 30 A6 E4         [24]  342 	jnb	_P2_6,00112$
      000043 20 A7 E1         [24]  343 	jb	_P2_7,00112$
                                    344 ;	hw4.c:62: IRWRITE(0x1C);
      000046 75 82 1C         [24]  345 	mov	dpl,#0x1C
      000049 12r00r4E         [24]  346 	lcall	_IRWRITE
      00004C 80 D9            [24]  347 	sjmp	00112$
                                    348 ;------------------------------------------------------------
                                    349 ;Allocation info for local variables in function 'IRWRITE'
                                    350 ;------------------------------------------------------------
                                    351 ;addr                      Allocated to registers r7 
                                    352 ;------------------------------------------------------------
                                    353 ;	hw4.c:69: void IRWRITE(char addr)
                                    354 ;	-----------------------------------------
                                    355 ;	 function IRWRITE
                                    356 ;	-----------------------------------------
      00004E                        357 _IRWRITE:
      00004E AF 82            [24]  358 	mov	r7,dpl
                                    359 ;	hw4.c:71: P1= (addr & 0xf0) ;
      000050 74 F0            [12]  360 	mov	a,#0xF0
      000052 5F               [12]  361 	anl	a,r7
      000053 F5 90            [12]  362 	mov	_P1,a
                                    363 ;	hw4.c:72: E = 1;
      000055 D2 92            [12]  364 	setb	_P1_2
                                    365 ;	hw4.c:73: E = 0;
      000057 C2 92            [12]  366 	clr	_P1_2
                                    367 ;	hw4.c:74: P1 = ((addr & 0x0f) << 4) | 0x00;
      000059 53 07 0F         [24]  368 	anl	ar7,#0x0F
      00005C EF               [12]  369 	mov	a,r7
      00005D C4               [12]  370 	swap	a
      00005E 54 F0            [12]  371 	anl	a,#0xF0
      000060 F5 90            [12]  372 	mov	_P1,a
                                    373 ;	hw4.c:75: E = 1;
      000062 D2 92            [12]  374 	setb	_P1_2
                                    375 ;	hw4.c:76: E = 0;
      000064 C2 92            [12]  376 	clr	_P1_2
                                    377 ;	hw4.c:77: delay();
      000066 02r00rEF         [24]  378 	ljmp	_delay
                                    379 ;------------------------------------------------------------
                                    380 ;Allocation info for local variables in function 'functionSet'
                                    381 ;------------------------------------------------------------
                                    382 ;	hw4.c:79: void functionSet(void) {//ok
                                    383 ;	-----------------------------------------
                                    384 ;	 function functionSet
                                    385 ;	-----------------------------------------
      000069                        386 _functionSet:
                                    387 ;	hw4.c:87: P1 = (P1&0x23) | 0x20;
      000069 74 23            [12]  388 	mov	a,#0x23
      00006B 55 90            [12]  389 	anl	a,_P1
      00006D 44 20            [12]  390 	orl	a,#0x20
      00006F F5 90            [12]  391 	mov	_P1,a
                                    392 ;	hw4.c:89: E = 1;
      000071 D2 92            [12]  393 	setb	_P1_2
                                    394 ;	hw4.c:90: E = 0;
      000073 C2 92            [12]  395 	clr	_P1_2
                                    396 ;	hw4.c:91: delay();
      000075 12r00rEF         [24]  397 	lcall	_delay
                                    398 ;	hw4.c:92: E = 1;
      000078 D2 92            [12]  399 	setb	_P1_2
                                    400 ;	hw4.c:93: E = 0;
      00007A C2 92            [12]  401 	clr	_P1_2
                                    402 ;	hw4.c:95: P1=0x80;
      00007C 75 90 80         [24]  403 	mov	_P1,#0x80
                                    404 ;	hw4.c:96: E = 1;
      00007F D2 92            [12]  405 	setb	_P1_2
                                    406 ;	hw4.c:97: E = 0;
      000081 C2 92            [12]  407 	clr	_P1_2
                                    408 ;	hw4.c:98: delay();
      000083 02r00rEF         [24]  409 	ljmp	_delay
                                    410 ;------------------------------------------------------------
                                    411 ;Allocation info for local variables in function 'setDdRamAddress'
                                    412 ;------------------------------------------------------------
                                    413 ;address                   Allocated to registers r7 
                                    414 ;------------------------------------------------------------
                                    415 ;	hw4.c:101: void setDdRamAddress(char address) {
                                    416 ;	-----------------------------------------
                                    417 ;	 function setDdRamAddress
                                    418 ;	-----------------------------------------
      000086                        419 _setDdRamAddress:
      000086 AF 82            [24]  420 	mov	r7,dpl
                                    421 ;	hw4.c:103: P1= (address & 0xf0) | 0x80;
      000088 74 F0            [12]  422 	mov	a,#0xF0
      00008A 5F               [12]  423 	anl	a,r7
      00008B 44 80            [12]  424 	orl	a,#0x80
      00008D F5 90            [12]  425 	mov	_P1,a
                                    426 ;	hw4.c:104: E = 1;
      00008F D2 92            [12]  427 	setb	_P1_2
                                    428 ;	hw4.c:105: E = 0;
      000091 C2 92            [12]  429 	clr	_P1_2
                                    430 ;	hw4.c:107: P1= (address & 0x0f) << 4;
      000093 53 07 0F         [24]  431 	anl	ar7,#0x0F
      000096 EF               [12]  432 	mov	a,r7
      000097 C4               [12]  433 	swap	a
      000098 54 F0            [12]  434 	anl	a,#0xF0
      00009A F5 90            [12]  435 	mov	_P1,a
                                    436 ;	hw4.c:108: E = 1;
      00009C D2 92            [12]  437 	setb	_P1_2
                                    438 ;	hw4.c:109: E = 0;
      00009E C2 92            [12]  439 	clr	_P1_2
                                    440 ;	hw4.c:110: delay();
      0000A0 02r00rEF         [24]  441 	ljmp	_delay
                                    442 ;------------------------------------------------------------
                                    443 ;Allocation info for local variables in function 'sendChar'
                                    444 ;------------------------------------------------------------
                                    445 ;c                         Allocated to registers r7 
                                    446 ;------------------------------------------------------------
                                    447 ;	hw4.c:115: void sendChar(char c) {
                                    448 ;	-----------------------------------------
                                    449 ;	 function sendChar
                                    450 ;	-----------------------------------------
      0000A3                        451 _sendChar:
      0000A3 AF 82            [24]  452 	mov	r7,dpl
                                    453 ;	hw4.c:121: P1 = (c & 0xf0) | 0x08;
      0000A5 74 F0            [12]  454 	mov	a,#0xF0
      0000A7 5F               [12]  455 	anl	a,r7
      0000A8 44 08            [12]  456 	orl	a,#0x08
      0000AA F5 90            [12]  457 	mov	_P1,a
                                    458 ;	hw4.c:122: E = 1;
      0000AC D2 92            [12]  459 	setb	_P1_2
                                    460 ;	hw4.c:123: E = 0;
      0000AE C2 92            [12]  461 	clr	_P1_2
                                    462 ;	hw4.c:129: P1=  ((c & 0x0f) << 4) | 0x08;
      0000B0 53 07 0F         [24]  463 	anl	ar7,#0x0F
      0000B3 EF               [12]  464 	mov	a,r7
      0000B4 C4               [12]  465 	swap	a
      0000B5 54 F0            [12]  466 	anl	a,#0xF0
      0000B7 FF               [12]  467 	mov	r7,a
      0000B8 74 08            [12]  468 	mov	a,#0x08
      0000BA 4F               [12]  469 	orl	a,r7
      0000BB F5 90            [12]  470 	mov	_P1,a
                                    471 ;	hw4.c:130: E = 1;
      0000BD D2 92            [12]  472 	setb	_P1_2
                                    473 ;	hw4.c:131: E = 0;
      0000BF C2 92            [12]  474 	clr	_P1_2
                                    475 ;	hw4.c:132: delay();
      0000C1 02r00rEF         [24]  476 	ljmp	_delay
                                    477 ;------------------------------------------------------------
                                    478 ;Allocation info for local variables in function 'sendString'
                                    479 ;------------------------------------------------------------
                                    480 ;str                       Allocated to registers 
                                    481 ;p                         Allocated to registers r5 r6 r7 
                                    482 ;------------------------------------------------------------
                                    483 ;	hw4.c:135: void sendString(char* str) {
                                    484 ;	-----------------------------------------
                                    485 ;	 function sendString
                                    486 ;	-----------------------------------------
      0000C4                        487 _sendString:
      0000C4 AD 82            [24]  488 	mov	r5,dpl
      0000C6 AE 83            [24]  489 	mov	r6,dph
      0000C8 AF F0            [24]  490 	mov	r7,b
                                    491 ;	hw4.c:142: for (p=str; *p; p++) {
      0000CA                        492 00103$:
      0000CA 8D 82            [24]  493 	mov	dpl,r5
      0000CC 8E 83            [24]  494 	mov	dph,r6
      0000CE 8F F0            [24]  495 	mov	b,r7
      0000D0 12r00r00         [24]  496 	lcall	__gptrget
      0000D3 FC               [12]  497 	mov	r4,a
      0000D4 60 18            [24]  498 	jz	00105$
                                    499 ;	hw4.c:143: sendChar(*p);
      0000D6 8C 82            [24]  500 	mov	dpl,r4
      0000D8 C0 07            [24]  501 	push	ar7
      0000DA C0 06            [24]  502 	push	ar6
      0000DC C0 05            [24]  503 	push	ar5
      0000DE 12r00rA3         [24]  504 	lcall	_sendChar
      0000E1 D0 05            [24]  505 	pop	ar5
      0000E3 D0 06            [24]  506 	pop	ar6
      0000E5 D0 07            [24]  507 	pop	ar7
                                    508 ;	hw4.c:142: for (p=str; *p; p++) {
      0000E7 0D               [12]  509 	inc	r5
      0000E8 BD 00 DF         [24]  510 	cjne	r5,#0x00,00103$
      0000EB 0E               [12]  511 	inc	r6
      0000EC 80 DC            [24]  512 	sjmp	00103$
      0000EE                        513 00105$:
      0000EE 22               [24]  514 	ret
                                    515 ;------------------------------------------------------------
                                    516 ;Allocation info for local variables in function 'delay'
                                    517 ;------------------------------------------------------------
                                    518 ;c                         Allocated to registers r7 
                                    519 ;------------------------------------------------------------
                                    520 ;	hw4.c:146: void delay(void) {
                                    521 ;	-----------------------------------------
                                    522 ;	 function delay
                                    523 ;	-----------------------------------------
      0000EF                        524 _delay:
                                    525 ;	hw4.c:148: for (c = 0; c < 50; c++);
      0000EF 7F 32            [12]  526 	mov	r7,#0x32
      0000F1                        527 00104$:
      0000F1 DF FE            [24]  528 	djnz	r7,00104$
      0000F3 22               [24]  529 	ret
                                    530 	.area CSEG    (CODE)
                                    531 	.area CONST   (CODE)
      000000                        532 ___str_0:
      000000 45 64 53 69 6D 35 31   533 	.ascii "EdSim51 LCD Module Simulation"
             20 4C 43 44 20 4D 6F
             64 75 6C 65 20 53 69
             6D 75 6C 61 74 69 6F
             6E
      00001D 00                     534 	.db 0x00
      00001E                        535 ___str_1:
      00001E 42 61 73 65 64 20 6F   536 	.ascii "Based on Hitachi HD44780"
             6E 20 48 69 74 61 63
             68 69 20 48 44 34 34
             37 38 30
      000036 00                     537 	.db 0x00
                                    538 	.area XINIT   (CODE)
                                    539 	.area CABS    (ABS,CODE)
